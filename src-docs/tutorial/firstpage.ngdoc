@ngdoc overview
@name A first page
@description

# Tutorial: A first page
In this tutorial, we will create a page to display public data using ODS Widgets, looking closely at every step.

We would like to simply show to our users a map of events that occured recently near them. We found a public dataset from
a crowdsourced list of events ([you can see it here](http://public.opendatasoft.com/explore/dataset/evenements-publics-cibul/?tab=metas);
it looks like the perfect source for us. Now, let's build!

## Contexts

Most widgets are about interacting with data; this means they need to know where to find that data. This is what contexts
are about: a source of data for our widgets. This source can be filtered (especially by other widgets) and shared between widgets, as we will see later.

There are two types of contexts: {@link api/ods-widgets.directive:odsCatalogContext catalog contexts} and {@link api/ods-widgets.directive:odsDatasetContext dataset contexts}.

A **catalog context** represents a catalog of datasets, in other words the list of datasets available on a given portal or API. You can search for datasets in that catalog,
get information about these datasets; but you can't use this context to interact with the content of these datasets. If you were in a public library, if would be analog to
browsing through the shelves, reading the covers and the back of the books, but not opening them.

A **dataset context** represents a specific dataset, and allows interaction with its content. You can search and filter in the data
using a full range of features (full-text search, geographical search...).

*Note: Another way to look at it is that catalog contexts are about metadata, and dataset contexts are about data.*

In our case, we want to display the data from a specific dataset, which is a list of public events: a dataset context is
the right tool for that job. {@link api/ods-widgets.directive:odsDatasetContext A look at the documentation} will give us the syntax and what we need to fill.

First we need to name our context: let's use "events".

<pre>
<ods-dataset-context context="events"></ods-dataset-context>
</pre>

Then we need to provide at least two mandatory attributes: `domain` and `dataset`.

The `domain` attribute represents the location of the dataset: this is usually the domain name of the portal or API where
the dataset is located. In our example, we found it on "public.opendatasoft.com".

The `dataset` attribute is the identifier of the dataset we want. You can find it for example indicated as the "Dataset Identifier"
on the [information page of the dataset](http://public.opendatasoft.com/explore/dataset/evenements-publics-cibul/?tab=metas).
In our case, it is "evenements-publics-cibul".

As indicated by the {@link api/ods-widgets.directive:odsDatasetContext documentation}, these attributes are prefixed
by the name of the context ("events").

<pre>
<ods-dataset-context context="events"
                     events-domain="public.opendatasoft.com"
                     events-dataset="evenements-publics-cibul">
</ods-dataset-context>
</pre>

We now have a source of data ready for consumption, but we still lack something to use it.

## Adding a widget to show data
We saw a {@link api/ods-widgets.directive:odsMap nice widget (odsMap)} that shows data on a map: let's use it!

When you create a dataset context, it is available to anything inside the HTML element. This means that I need to add
my odsMap widget inside the `<ods-dataset-context>` element.

As indicated by the {@link api/ods-widgets.directive:odsMap documentation of the widget}, the only mandatory parameter
is `context`: this is the parameter used to tell which context the widget should get its data from. In our case, the context
is "events".

<pre>
<ods-dataset-context context="events"
                     events-domain="public.opendatasoft.com"
                     events-dataset="evenements-publics-cibul">
    <ods-map context="events"></ods-map>
</ods-dataset-context>
</pre>

<div class="well" ng-embed-app="ods-widgets">
<ods-dataset-context context="events"
                     events-domain="public.opendatasoft.com"
                     events-dataset="evenements-publics-cibul">
    <ods-map context="events"></ods-map>
</ods-dataset-context>
</div>

## Adding another widget to filter the data
We would like to allow users to see what happened recently: last week, last month...

Luckily for us, there is a widget that does exactly that: {@link api/ods-widgets.directive:odsTimescale the odsTimescale widget}.

This widget allows users to select a range in the past to filter the data. According to the documentation, the only parameter it requires
is a context, but we can also target a specific date field. Here, we'd like to show the events that ended recently, so let's use the
`date_end` field that contains exactly what we need.

We want it to filter the data displayed by the map, so all we need is to plug it to the same context.

<pre>
<ods-dataset-context context="events"
                     events-domain="public.opendatasoft.com"
                     events-dataset="evenements-publics-cibul">
    <ods-timescale context="events" time-field="date_end"></ods-timescale>
    <ods-map context="events"></ods-map>
</ods-dataset-context>
</pre>

<div class="well" ng-embed-app="ods-widgets">
<ods-dataset-context context="events"
                     events-domain="public.opendatasoft.com"
                     events-dataset="evenements-publics-cibul">
    <ods-timescale context="events" time-field="date_end"></ods-timescale>
    <ods-map context="events"></ods-map>
</ods-dataset-context>
</div>