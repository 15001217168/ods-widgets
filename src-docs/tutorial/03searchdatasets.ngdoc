@ngdoc overview
@name 3. A dataset search page
@description

# Tutorial: A dataset search page

In this tutorial, we will build a search page for a dataset catalog, offering various ways to browse it.

Previously, we built {@link 02catalogpage a homepage for an Open Data portal}. Now that our visitors are eager to
discover the treasures we can offer, we should provide them with tools to help them explore our catalog. There are
various available widgets that can help us build a simple custom search engine.

First, let's display 5 datasets, ordered by date of last modification, as if it were search results without any search done yet.
We'll work our way up from there by adding various ways to filter and drill down the results.

To achieve this, we first add a `sort` parameter to our context to ensure results are sorted by descending modification date.
Then a {@link api/ods-widgets.directive:odsResultEnumerator odsResultEnumerator} will allow us to simply display the results.

<pre>
<ods-catalog-context context="catalog" catalog-domain="public.opendatasoft.com" catalog-parameters="{'sort': 'modified'}">
    <ods-result-enumerator context="catalog" max="5" show-hits-counter="true">
        <div>
            <h3>{{item.metas.title}}</h3>
            <p>License: {{item.metas.license}}</p>
        </div>
    </ods-result-enumerator>
</ods-catalog-context>
</pre>

<div class="well" ng-embed-app="ods-widgets">
<ods-catalog-context context="catalog" catalog-domain="public.opendatasoft.com" catalog-parameters="{'sort': 'modified'}">
    <ods-result-enumerator context="catalog" max="5" show-hits-counter="true">
        <div>
            <h3>{{item.metas.title}}</h3>
            <p>License: {{item.metas.license}}</p>
        </div>
    </ods-result-enumerator>
</ods-catalog-context>
</div>

Now we can add two important features: a full-text search and a faceted search (categories to filter on). We can do that
using two widgets: {@link api/ods-widgets.directive:odsTextSearch odsTextSearch} and {@link api/ods-widgets.directive:odsFacets odsFacets}.
By plugging them on the same context, they will directly apply their filters on the results we displayed earlier.

The {@link api/ods-widgets.directive:odsTextSearch odsTextSearch} only requires a context (but can also take more options as
you can see in the documentation), while the {@link api/ods-widgets.directive:odsFacets odsFacets} can be finely configured. We'll
only display the themes for now.

<pre>
<ods-catalog-context context="catalog" catalog-domain="public.opendatasoft.com" catalog-parameters="{'sort': 'modified'}">
  <div class="row-fluid">
    <div class="span4">
      <ods-facets context="catalog">
        <ods-facet name="theme"></ods-facet>
      </ods-facets>
    </div>
    <div class="span8">
      <ods-text-search context="catalog" style="text-align: center;"></ods-text-search>
      <ods-result-enumerator context="catalog" max="5" show-hits-counter="true">
        <div>
          <h3>{{item.metas.title}}</h3>
          <p>License: {{item.metas.license}}</p>
        </div>
      </ods-result-enumerator>
    </div>
  </div>
</ods-catalog-context>
</pre>

<div class="well" ng-embed-app="ods-widgets">
<ods-catalog-context context="catalog" catalog-domain="public.opendatasoft.com" catalog-parameters="{'sort': 'modified'}">
  <div class="row-fluid">
    <div class="span4">
      <ods-facets context="catalog">
        <ods-facet name="theme"></ods-facet>
      </ods-facets>
    </div>
    <div class="span8">
      <ods-text-search context="catalog" style="text-align: center;"></ods-text-search>
      <ods-result-enumerator context="catalog" max="5" show-hits-counter="true">
        <div>
          <h3>{{item.metas.title}}</h3>
          <p>License: {{item.metas.license}}</p>
        </div>
      </ods-result-enumerator>
    </div>
  </div>
</ods-catalog-context>
</div>